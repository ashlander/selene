# Selene Azure Pipelines Configuration

# The Docker based jobs require specially prepared Docker images, where either
# the respective libraries are pre-installed via apt (test_apt) or vcpkg
# (test_vcpkg). These Docker images are based on 'ubuntu:rolling' (currently
# Ubuntu 19.10), to provide GCC 9 and Clang 9 out of the box.
#
# See https://github.com/kmhofmann/selene_ci_docker on how they are created.

jobs:
  - job: Docker_Ubuntu_base_GCC_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_base
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_base bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_base bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Release'

  - job: Docker_Ubuntu_apt_GCC_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Release'

  - job: Docker_Ubuntu_apt_Clang_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Release'

  - job: Docker_Ubuntu_apt_ASAN_Clang_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run --cap-add SYS_PTRACE -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "ASAN=1" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, ASAN'

  - job: Docker_Ubuntu_vcpkg_GCC_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_vcpkg
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Release'

  - job: Docker_Ubuntu_vcpkg_Clang_libcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_vcpkg
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image, Release'

  - job: Docker_Ubuntu_Android_NDK
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_vcpkg_android
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "BUILD_TYPE=Debug" kmhofmann/selene_test_vcpkg_android bash -c "./selene/.azure-pipelines/build_project_android.sh"
        displayName: 'Run Docker image, Debug'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg_android bash -c "./selene/.azure-pipelines/build_project_android.sh"
        displayName: 'Run Docker image, Release'

  - job: Windows_vcpkg_VS2017_x64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        ..\vcpkg\bootstrap-vcpkg.bat
      displayName: 'Bootstrap vcpkg'
    - script: ..\vcpkg\vcpkg.exe install libjpeg-turbo libpng tiff --triplet x64-windows
      displayName: 'Install vcpkg dependencies'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON -DSELENE_WARNINGS_AS_ERRORS=ON ..'
      displayName: 'Run CMake'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
        configuration: 'Release'
      displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'
    - script: |
        cp .\package\vcpkg\CONTROL ..\vcpkg\ports\selene
        cp .\package\vcpkg\portfile.cmake ..\vcpkg\ports\selene
        ..\vcpkg\vcpkg.exe remove selene
        ..\vcpkg\vcpkg.exe install --head selene --triplet x64-windows
        cd package\test_vcpkg
        mkdir build
      displayName: 'Install selene via vcpkg'
    - task: CMake@1
      inputs:
        workingDirectory: 'package\test_vcpkg\build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../../../vcpkg/scripts/buildsystems/vcpkg.cmake ..'
      displayName: 'Run CMake on vcpkg example'
    - task: MSBuild@1
      inputs:
        solution: 'package\test_vcpkg\build\ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build vcpkg example, debug'
    - script: |
        .\package\test_vcpkg\build\Debug\example
      displayName: 'Run vcpkg example'

  - job: Windows_vcpkg_VS2017_x86
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        ..\vcpkg\bootstrap-vcpkg.bat
      displayName: 'Bootstrap vcpkg'
    - script: ..\vcpkg\vcpkg.exe install libjpeg-turbo libpng tiff
      displayName: 'Install vcpkg dependencies'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON -DSELENE_WARNINGS_AS_ERRORS=ON ..'
      displayName: 'Run CMake'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x86'
      displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x86'
        configuration: 'Release'
      displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'
    - script: |
        cp .\package\vcpkg\CONTROL ..\vcpkg\ports\selene
        cp .\package\vcpkg\portfile.cmake ..\vcpkg\ports\selene
        ..\vcpkg\vcpkg.exe remove selene
        ..\vcpkg\vcpkg.exe install --head selene
        cd package\test_vcpkg
        mkdir build
      displayName: 'Install selene via vcpkg'
    - task: CMake@1
      inputs:
        workingDirectory: 'package\test_vcpkg\build'
        cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../../../../vcpkg/scripts/buildsystems/vcpkg.cmake ..'
      displayName: 'Run CMake on vcpkg example'
    - task: MSBuild@1
      inputs:
        solution: 'package\test_vcpkg\build\ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x86'
      displayName: 'Build vcpkg example, debug'
    - script: |
        .\package\test_vcpkg\build\Debug\example
      displayName: 'Run vcpkg example'

  - job: MacOS_vcpkg
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - script: |
        # https://github.com/microsoft/vcpkg/issues/7585#issuecomment-534121249
        sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
      displayName: 'Fix macOS things to build vcpkg'
    - script: |
        brew update
        brew install gcc ninja gnu-sed
        # Remove conflicting headers (e.g. png.h)
        sudo rm -rf /Library/Frameworks/Mono.framework/Headers
      displayName: 'Install brew dependencies'
    - script: |
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        # Make sure Boost is compiled in C++17 mode;
        # see e.g. https://github.com/Microsoft/vcpkg/issues/4476#issuecomment-430175834
        export BOOST_MODULAR_CMAKE="../vcpkg/ports/boost-modular-build-helper/CMakeLists.txt"
        export LN=$(grep -n "WORKING_DIRECTORY" ${BOOST_MODULAR_CMAKE} | awk -F ":" '{print $1}')
        gsed -i "${LN}i\        cxxstd=17" ${BOOST_MODULAR_CMAKE}
        ../vcpkg/bootstrap-vcpkg.sh 
      displayName: 'Bootstrap vcpkg'
    - script: |
        ../vcpkg/vcpkg install libjpeg-turbo libpng tiff boost-filesystem
      displayName: 'Install vcpkg dependencies'
    - script: |
        pwd
        mkdir build-debug && cd build-debug
        cmake -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_BUILD_TYPE=Debug \
              -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
      displayName: 'Run CMake, debug'
    - script: |
        cd build-debug && ninja
      displayName: 'Run ninja, debug'
    - script: |
        cd build-debug && ./test/selene_tests -d yes
      displayName: 'Run tests, debug'
    - script: |
        pwd
        mkdir build-release && cd build-release
        cmake -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
      displayName: 'Run CMake, release'
    - script: |
        cd build-release && ninja
      displayName: 'Run ninja, release'
    - script: |
        cd build-release && ./test/selene_tests -d yes
      displayName: 'Run tests, release'

  - job: MacOS_brew
    pool:
      vmImage: 'macOS-10.14'
    steps:
    - script: |
        brew update
        brew install ninja libjpeg-turbo libpng libtiff boost
        # Remove conflicting headers (e.g. png.h)
        sudo rm -rf /Library/Frameworks/Mono.framework/Headers
      displayName: Install brew dependencies
    - script: |
        mkdir build-debug && cd build-debug
        cmake -G Ninja \
              -DCMAKE_PREFIX_PATH="/usr/local/opt/jpeg-turbo;/usr/local" \
              -DCMAKE_BUILD_TYPE=Debug \
              -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
      displayName: 'Run CMake, debug'
    - script: |
        cd build-debug && ninja
      displayName: 'Run ninja, debug'
    - script: |
        cd build-debug && ./test/selene_tests -d yes
      displayName: 'Run tests, debug'
    - script: |
        mkdir build-release && cd build-release
        cmake -G Ninja \
              -DCMAKE_PREFIX_PATH="/usr/local/opt/jpeg-turbo;/usr/local" \
              -DCMAKE_BUILD_TYPE=Release \
              -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
      displayName: 'Run CMake, release'
    - script: |
        cd build-release && ninja
      displayName: 'Run ninja, release'
    - script: |
        cd build-release && ./test/selene_tests -d yes
      displayName: 'Run tests, release'
