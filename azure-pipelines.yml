# Selene Azure Pipelines Configuration

# The Docker based jobs require specially prepared Docker images, where either
# the respective libraries are pre-installed via apt (test_apt) or vcpkg
# (test_vcpkg). These Docker images are based on 'ubuntu:rolling' (currently
# Ubuntu 18.10), to provide GCC 8 and Clang 7 out of the box.

jobs:
  - job: Docker_Ubuntu_apt_Clang_libstdcxx_ASAN
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run --cap-add SYS_PTRACE -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "ASAN=1" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image'

  - job: Docker_Ubuntu_apt_Clang_libstdcxx
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image'

  - job: Docker_Ubuntu_apt_GCC_libstdcxx
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_apt
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image'

  - job: Docker_Ubuntu_vcpkg_GCC_libstdcxx
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_vcpkg
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
          docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image'

  - job: Docker_Ubuntu_vcpkg_Clang_libcxx
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          docker pull kmhofmann/selene_test_vcpkg
        displayName: 'Pull Docker image'
      - script: |
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
          docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
        displayName: 'Run Docker image'

  - job: Windows_vcpkg_VS2017_x64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        ..\vcpkg\bootstrap-vcpkg.bat
      displayName: 'Bootstrap vcpkg'
    - script: ..\vcpkg\vcpkg.exe install libjpeg-turbo libpng boost-filesystem --triplet x64-windows
      displayName: 'Install vcpkg dependencies'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..'
        displayName: 'Run CMake'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
        displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..'
        displayName: 'Run CMake, release'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
        configuration: 'Release'
        displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'

  - job: Windows_vcpkg_VS2017_x86
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        ..\vcpkg\bootstrap-vcpkg.bat
      displayName: 'Bootstrap vcpkg'
    - script: ..\vcpkg\vcpkg.exe install libjpeg-turbo libpng boost-filesystem
      displayName: 'Install vcpkg dependencies'
    - script: |
        mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..'
        displayName: 'Run CMake'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x86'
        displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '--DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..'
        displayName: 'Run CMake, release'
    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x86'
        configuration: 'Release'
        displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'

# These jobs don't work yet; work in progress...

#  - job: MacOS_vcpkg
#    pool:
#      vmImage: 'macOS-10.13'
#    steps:
#    - script: |
#        brew install gcc ninja
#      displayName: 'Install brew dependencies'
#    - script: |
#        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
#        ../vcpkg/bootstrap-vcpkg.sh
#      displayName: 'Bootstrap vcpkg'
#    - script: |
#        ../vcpkg/vcpkg install libjpeg-turbo libpng boost-system boost-filesystem
#      displayName: 'Install vcpkg dependencies'
#    - script: |
#        mkdir build && cd build
#        cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
#      displayName: 'Run CMake'
#    - script: |
#        cd build && ninja
#      displayName: 'Run ninja'
#    - script: |
#        cd build && ./test/selene_tests -d yes
#      displayName: 'Run tests'
#
#
#  - job: MacOS_brew
#    pool:
#      vmImage: 'macOS-10.13'
#    steps:
#    - script: |
#        brew install ninja libjpeg-turbo libpng boost
#        brew link libjpeg-turbo
#      displayName: Install brew dependencies
#    - script: |
#        mkdir build && cd build
#        export LDFLAGS="-L/usr/local/opt/jpeg-turbo/lib"
#        export CPPFLAGS="-I/usr/local/opt/jpeg-turbo/include"
#        cmake --debug-output -G Ninja -DCMAKE_BUILD_TYPE=Debug -DSELENE_BUILD_TESTS=ON -DSELENE_BUILD_EXAMPLES=ON -DSELENE_NO_OPENCV=ON ..
#      displayName: 'Run CMake'
#    - script: |
#        cd build && ninja
#      displayName: 'Run ninja'
#    - script: |
#        cd build && ./test/selene_tests -d yes
#      displayName: 'Run tests'
