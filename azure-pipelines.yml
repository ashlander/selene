# Selene Azure Pipelines Configuration

# The Docker based jobs require specially prepared Docker images, where either
# the respective libraries are pre-installed via apt (test_apt) or vcpkg
# (test_vcpkg). These Docker images are based on 'ubuntu:19.10' (currently),
# to provide GCC 9 and Clang 9 out of the box.
#
# See https://github.com/kmhofmann/selene_ci_docker on how they are created.

# ***************************************************
# TODO: Add OpenCV to tested dependencies on Windows.
# ***************************************************

variables:
  vcpkg_tag: "2020.01"
  vcpkg_base_dir_bionic: "/tmp"
  vcpkg_base_dir_macos: "/tmp"
  vcpkg_libraries_bionic:  "libjpeg-turbo libpng tiff opencv benchmark"
  vcpkg_libraries_windows: "libjpeg-turbo libpng tiff opencv benchmark"
  vcpkg_libraries_macos:   "libjpeg-turbo libpng tiff opencv benchmark boost-filesystem"
  brew_libraries:          "libjpeg-turbo libpng libtiff opencv google-benchmark boost ninja"

jobs:

  - job: Ubuntu_bionic_apt_GCC_seven_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              ninja-build g++ libjpeg-turbo8-dev libpng-dev libtiff-dev libopencv-dev
        displayName: 'Install system dependencies'
      - script: |
          CC=gcc CXX=g++ BUILD_TYPE=Debug ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=gcc CXX=g++ BUILD_TYPE=Release ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'

# ----------

  - job: Ubuntu_bionic_apt_Clang_seven_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              ninja-build libstdc++-7-dev clang libjpeg-turbo8-dev libpng-dev libtiff-dev libopencv-dev
        displayName: 'Install system dependencies'
      - script: |
          CC=clang CXX=clang++ BUILD_TYPE=Debug ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=clang CXX=clang++ BUILD_TYPE=Release ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'
      - script: |
          CC=clang CXX=clang++ ASAN=1 ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, sanitizers'

# ----------

  - job: Ubuntu_bionic_base_GCC_eight_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              ninja-build g++-8
        displayName: 'Install system dependencies'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Debug ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Release ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'

# ----------

  - job: Ubuntu_bionic_apt_GCC_eight_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              ninja-build g++-8 libjpeg-turbo8-dev libpng-dev libtiff-dev libopencv-dev
        displayName: 'Install system dependencies'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Debug ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Release ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'
      # DISABLED -- TAKES TOO LONG TO BUILD
      #- script: |
      #    CC=gcc-8 CXX=g++-8 ASAN=1 ./.azure-pipelines/ubuntu-18.04_build_project.sh
      #  displayName: 'Build and run project, sanitizers'

# ----------

  - job: Ubuntu_bionic_apt_Clang_eight_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              ninja-build libstdc++-8-dev clang-8 libjpeg-turbo8-dev libpng-dev libtiff-dev libopencv-dev
        displayName: 'Install system dependencies'
      - script: |
          CC=clang-8 CXX=clang++-8 BUILD_TYPE=Debug ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=clang-8 CXX=clang++-8 BUILD_TYPE=Release ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'
      - script: |
          CC=clang-8 CXX=clang++-8 ASAN=1 ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, sanitizers'

# ----------

  - job: Ubuntu_bionic_vcpkg_GCC_eight_libstdcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              wget curl unzip tar ninja-build g++-8
        displayName: 'Install system dependencies'
      - script: |
          ./.azure-pipelines/ubuntu-18.04_clone_vcpkg.sh $(vcpkg_base_dir_bionic) $(vcpkg_tag)
        displayName: 'Clone vcpkg'
      - task: CacheBeta@1
        inputs:
          key: '"$(Agent.OS)" | "$(Agent.OSArchitecture)" | "$(Agent.JobName)" | "$(vcpkg_tag)" | "$(vcpkg_libraries_bionic)" | "v00"'
          path: $(vcpkg_base_dir_bionic)/vcpkg
          cacheHitVar: VCPKG_CACHE_RESTORED
        displayName: 'Cache vcpkg'
      - script: |
          ./.azure-pipelines/ubuntu-18.04_install_vcpkg_deps.sh $(vcpkg_base_dir_bionic) $(vcpkg_libraries_bionic)
        condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
        displayName: 'Bootstrap vcpkg and install dependencies'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Debug VCPKG_DIR=$(vcpkg_base_dir_bionic)/vcpkg \
              ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=gcc-8 CXX=g++-8 BUILD_TYPE=Release VCPKG_DIR=$(vcpkg_base_dir_bionic)/vcpkg \
              ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'

# ----------

  - job: Ubuntu_bionic_vcpkg_Clang_eight_libcxx
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - script: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get update
          DEBIAN_FRONTEND=noninteractive sudo apt-get -y install \
              wget curl unzip tar ninja-build g++-8 clang-8 libc++-8-dev libc++abi-8-dev
        displayName: 'Install system dependencies'
      - script: |
          ./.azure-pipelines/ubuntu-18.04_clone_vcpkg.sh $(vcpkg_base_dir_bionic) $(vcpkg_tag)
        displayName: 'Clone vcpkg'
      - task: CacheBeta@1
        inputs:
          key: '"$(Agent.OS)" | "$(Agent.OSArchitecture)" | "$(Agent.JobName)" | "$(vcpkg_tag)" | "$(vcpkg_libraries_bionic)" | "v00"'
          path: $(vcpkg_base_dir_bionic)/vcpkg
          cacheHitVar: VCPKG_CACHE_RESTORED
        displayName: 'Cache vcpkg'
      - script: |
          CC=clang-8 CXX=clang++-8 CXXFLAGS="-stdlib=libc++" LDFLAGS="-stdlib=libc++" \
              ./.azure-pipelines/ubuntu-18.04_install_vcpkg_deps.sh $(vcpkg_base_dir_bionic) $(vcpkg_libraries_bionic)
        condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
        displayName: 'Bootstrap vcpkg and install dependencies'
      - script: |
          CC=clang-8 CXX=clang++-8 CXXFLAGS="-stdlib=libc++" LDFLAGS="-stdlib=libc++" BUILD_TYPE=Debug VCPKG_DIR=$(vcpkg_base_dir_bionic)/vcpkg \
              ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, debug'
      - script: |
          CC=clang-8 CXX=clang++-8 CXXFLAGS="-stdlib=libc++" LDFLAGS="-stdlib=libc++" BUILD_TYPE=Release VCPKG_DIR=$(vcpkg_base_dir_bionic)/vcpkg \
              ./.azure-pipelines/ubuntu-18.04_build_project.sh
        displayName: 'Build and run project, release'

# ----------

  #- job: Ubuntu_Docker_base_GCC_libstdcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_base
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_base bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_base bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  #- job: Ubuntu_Docker_apt_GCC_libstdcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_apt
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  #- job: Ubuntu_Docker_apt_Clang_libstdcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_apt
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "BUILD_TYPE=Release" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  #- job: Ubuntu_Docker_apt_ASAN_Clang_libstdcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_apt
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run --cap-add SYS_PTRACE -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "ASAN=1" kmhofmann/selene_test_apt bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, ASAN'

# ----------

  #- job: Ubuntu_Docker_vcpkg_GCC_libstdcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_vcpkg
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=gcc" -e "CXX=g++" -e "VCPKG_DIR=vcpkg" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  #- job: Ubuntu_Docker_vcpkg_Clang_libcxx
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_vcpkg
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Debug"   kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "CC=clang" -e "CXX=clang++" -e "CXXFLAGS=\"-stdlib=libc++\"" -e "LDFLAGS=\"-stdlib=libc++\"" -e "VCPKG_DIR=vcpkg-libcxx" -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg bash -c "./selene/.azure-pipelines/build_project.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  #- job: Ubuntu_Docker_Android_NDK
  #  pool:
  #    vmImage: 'Ubuntu 18.04'
  #  steps:
  #    - script: |
  #        docker pull kmhofmann/selene_test_vcpkg_android
  #      displayName: 'Pull Docker image'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "BUILD_TYPE=Debug" kmhofmann/selene_test_vcpkg_android bash -c "./selene/.azure-pipelines/build_project_android.sh"
  #      displayName: 'Run Docker image, Debug'
  #    - script: |
  #        docker run -v$(pwd):/home/selene/ -e "BUILD_TYPE=Release" kmhofmann/selene_test_vcpkg_android bash -c "./selene/.azure-pipelines/build_project_android.sh"
  #      displayName: 'Run Docker image, Release'

# ----------

  - job: Windows_vcpkg_VS2019_x64
    timeoutInMinutes: 120
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: CacheBeta@1
      inputs:
        key: '"$(Agent.OS)" | "$(Agent.OSArchitecture)" | "$(Agent.JobName)" | "$(vcpkg_tag)" | "$(vcpkg_libraries_windows)" | "v00"'
        path: ../vcpkg
        cacheHitVar: VCPKG_CACHE_RESTORED
      displayName: 'Cache vcpkg'
    - script: |
        ls ..
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        git -C ../vcpkg checkout $(vcpkg_tag)
        ..\vcpkg\bootstrap-vcpkg.bat
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
      displayName: 'Bootstrap vcpkg'
    - script: |
        ..\vcpkg\vcpkg.exe install $(vcpkg_libraries_windows) --triplet x64-windows
        rd /s /q ..\vcpkg\buildtrees
        rd /s /q ..\vcpkg\downloads
        rd /s /q ..\vcpkg\packages
        ..\vcpkg\vcpkg.exe list
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
      displayName: 'Install vcpkg dependencies'

    - script: mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_ALL=ON -DSELENE_WARNINGS_AS_ERRORS=ON ..'
      displayName: 'Run CMake'

    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'

    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
        configuration: 'Release'
      displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'

    - script: |
        cp .\package\vcpkg\CONTROL ..\vcpkg\ports\selene
        cp .\package\vcpkg\portfile.cmake ..\vcpkg\ports\selene
        ..\vcpkg\vcpkg.exe remove selene
        ..\vcpkg\vcpkg.exe install --head selene --triplet x64-windows
        cd package\test_vcpkg
        mkdir build
      displayName: 'Install selene via vcpkg'
    - task: CMake@1
      inputs:
        workingDirectory: 'package\test_vcpkg\build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../../../vcpkg/scripts/buildsystems/vcpkg.cmake ..'
      displayName: 'Run CMake on vcpkg example'
    - task: MSBuild@1
      inputs:
        solution: 'package\test_vcpkg\build\ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build vcpkg example, debug'
    - script: |
        .\package\test_vcpkg\build\Debug\example
      displayName: 'Run vcpkg example'

# ----------

  - job: Windows_vcpkg_VS2017_x64
    timeoutInMinutes: 120
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: CacheBeta@1
      inputs:
        key: '"$(Agent.OS)" | "$(Agent.OSArchitecture)" | "$(Agent.JobName)" | "$(vcpkg_tag)" | "$(vcpkg_libraries_windows)" | "v00"'
        path: ../vcpkg
        cacheHitVar: VCPKG_CACHE_RESTORED
      displayName: 'Cache vcpkg'
    - script: |
        ls ..
        git clone https://github.com/Microsoft/vcpkg.git ../vcpkg
        git -C ../vcpkg checkout $(vcpkg_tag)
        ..\vcpkg\bootstrap-vcpkg.bat
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
      displayName: 'Bootstrap vcpkg'
    - script: |
        ..\vcpkg\vcpkg.exe install $(vcpkg_libraries_windows) --triplet x64-windows
        rd /s /q ..\vcpkg\buildtrees
        rd /s /q ..\vcpkg\downloads
        rd /s /q ..\vcpkg\packages
        ..\vcpkg\vcpkg.exe list
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
      displayName: 'Install vcpkg dependencies'

    - script: mkdir build
      displayName: 'Create build directory'
    - task: CMake@1
      inputs:
        workingDirectory: 'build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake -DSELENE_BUILD_ALL=ON -DSELENE_WARNINGS_AS_ERRORS=ON ..'
      displayName: 'Run CMake'

    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build, debug'
    - script: |
        cd build
        .\test\Debug\selene_tests.exe -d yes
      displayName: 'Run tests, debug'

    - task: MSBuild@1
      inputs:
        solution: 'build/ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
        configuration: 'Release'
      displayName: 'Build, release'
    - script: |
        cd build
        .\test\Release\selene_tests.exe -d yes
      displayName: 'Run tests, release'

    - script: |
        cp .\package\vcpkg\CONTROL ..\vcpkg\ports\selene
        cp .\package\vcpkg\portfile.cmake ..\vcpkg\ports\selene
        ..\vcpkg\vcpkg.exe remove selene
        ..\vcpkg\vcpkg.exe install --head selene --triplet x64-windows
        cd package\test_vcpkg
        mkdir build
      displayName: 'Install selene via vcpkg'
    - task: CMake@1
      inputs:
        workingDirectory: 'package\test_vcpkg\build'
        cmakeArgs: '-A x64 -DCMAKE_TOOLCHAIN_FILE=../../../../vcpkg/scripts/buildsystems/vcpkg.cmake ..'
      displayName: 'Run CMake on vcpkg example'
    - task: MSBuild@1
      inputs:
        solution: 'package\test_vcpkg\build\ALL_BUILD.vcxproj'
        maximumCpuCount: true
        platform: 'x64'
      displayName: 'Build vcpkg example, debug'
    - script: |
        .\package\test_vcpkg\build\Debug\example
      displayName: 'Run vcpkg example'

# ----------

  - job: MacOS_vcpkg
    pool:
      vmImage: 'macOS-10.15'
    steps:
    - script: |
        brew update
        brew install gcc ninja gnu-sed
        # Remove conflicting headers (e.g. png.h)
        sudo rm -rf /Library/Frameworks/Mono.framework/Headers
      displayName: 'Install brew dependencies'

    - script: |
        ./.azure-pipelines/macos_clone_vcpkg.sh $(vcpkg_base_dir_macos) $(vcpkg_tag)
      displayName: 'Clone vcpkg'

    - task: CacheBeta@1
      inputs:
        key: '"$(Agent.OS)" | "$(Agent.OSArchitecture)" | "$(Agent.JobName)" | "$(vcpkg_tag)" | "$(vcpkg_libraries_macos)" | "v00"'
        path: $(vcpkg_base_dir_macos)/vcpkg
        cacheHitVar: VCPKG_CACHE_RESTORED
      displayName: 'Cache vcpkg'

    - script: |
        ./.azure-pipelines/macos_install_vcpkg_deps.sh $(vcpkg_base_dir_macos) $(vcpkg_libraries_macos)
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
      displayName: 'Bootstrap vcpkg and install dependencies'

    - script: |
        mkdir build-debug && cd build-debug
        cmake -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE=$(vcpkg_base_dir_macos)/vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_BUILD_TYPE=Debug -DSELENE_BUILD_ALL=ON ..
      displayName: 'Run CMake, debug'
    - script: |
        cd build-debug && ninja
      displayName: 'Run ninja, debug'
    - script: |
        cd build-debug && ./test/selene_tests -d yes
      displayName: 'Run tests, debug'

    - script: |
        mkdir build-release && cd build-release
        cmake -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE=$(vcpkg_base_dir_macos)/vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_BUILD_TYPE=Release -DSELENE_BUILD_ALL=ON ..
      displayName: 'Run CMake, release'
    - script: |
        cd build-release && ninja
      displayName: 'Run ninja, release'
    - script: |
        cd build-release && ./test/selene_tests -d yes
      displayName: 'Run tests, release'

# ----------

  - job: MacOS_brew
    pool:
      vmImage: 'macOS-10.15'
    steps:
    - script: |
        # Remove conflicting headers (e.g. png.h)
        sudo rm -rf /Library/Frameworks/Mono.framework/Headers
      displayName: Clean-up conflicting headers
    - script: |
        brew update
        brew install $(brew_libraries)
      displayName: Install brew dependencies

    - script: |
        mkdir build-debug && cd build-debug
        cmake -G Ninja \
              -DCMAKE_PREFIX_PATH="/usr/local/opt/jpeg-turbo;/usr/local" \
              -DCMAKE_BUILD_TYPE=Debug -DSELENE_BUILD_ALL=ON ..
      displayName: 'Run CMake, debug'
    - script: |
        cd build-debug && ninja
      displayName: 'Run ninja, debug'
    - script: |
        cd build-debug && ./test/selene_tests -d yes
      displayName: 'Run tests, debug'

    - script: |
        mkdir build-release && cd build-release
        cmake -G Ninja \
              -DCMAKE_PREFIX_PATH="/usr/local/opt/jpeg-turbo;/usr/local" \
              -DCMAKE_BUILD_TYPE=Release -DSELENE_BUILD_ALL=ON ..
      displayName: 'Run CMake, release'
    - script: |
        cd build-release && ninja
      displayName: 'Run ninja, release'
    - script: |
        cd build-release && ./test/selene_tests -d yes
      displayName: 'Run tests, release'
